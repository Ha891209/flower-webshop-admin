openapi: 3.0.0
info:
  version: 1.0.0
  title: Annie's Flower Webshop API
  description: A simple flower webshop API
servers:
  - url: http://localhost:3000/api
paths:
  /api/customers:
    get:
      description: Returns a list of customers
      tags:
        - Customers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of persons returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new Customer
      tags:
        - Customers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customers has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/customers/{_id}:
    get:
      description: Returns the customer with the given ID
      tags:
        - Customers
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer data returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer with the give ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Customer query Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a Customer
      tags:
        - Customers
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/flowers: 
    get:
      description: Returns a list of flowers
      tags:
        - Flowers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of flowers returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flower'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new flower
      tags:
        - Flowers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flower'
      responses:
        '201':
          description: Flower has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flower'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/flowers/{_id}:
    get:
      description: Returns a flower with the given ID
      tags:
        - Flowers
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Flower data returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flower'
        '404':
          description: Flower with the give ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a Flower
      tags:
        - Flowers
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flower'
      responses:
        '201':
          description: Flower has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flower'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a flower
      tags:
        - Flowers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Flower has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Flower based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/orders: 
    get:
      description: Returns a list of orders
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new order
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/orders/{_id}:
    get:
      description: Returns a order with the given ID
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order data returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order with the give ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a Order
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a order
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Order has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Order based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Customer:
      type: object
      required:
        - first_name
        - last_name
        - email
        - address
        - active
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        address: 
          type: string
    Flower:
      type: object
      required:
        - name
        - description
        - active
        - price
      properties:
        title:
          type: string
        description:
          type: string
        active:
          type: boolen
        price:
          type: number
    Order:
      type: object
      required:
        - product
        - customer
        - amount
        - status
      properties:
        product:
          type: string
        customer:
          type: string
        amount:
          type: number
        status:
          type: boolen
    Error:
      type: object
      required:
        - message
        - has_error
      properties:
        message:
          type: string
        has_error:
          type: boolean